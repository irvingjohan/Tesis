@page "/Tablilla"
@inject IRepositorio repositorio
@inject NavigationManager navigationManager
@inject DialogService dialogService
@inject DialogService dialogServiceDesactivar
@implements IDisposable
@inject NotificationService notificationService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@*Login*@
@attribute [Authorize]
@inject CustomAuthenticationStateProvider Auth
@inject HttpClient Http
@*Login*@

<AuthorizeView>
    <Authorized>
        <h3>Catálogo de Tablillas</h3>

        @if (tablilla == null)
        {
            if (!_esAdmin)
            {
                <text>No tiene permisos suficientes para estar aquí...</text>
            }
        }
        else
        {
            if (_esAdmin)
            {
                if (_esAdmin)
                {
                    <div class="form-group">
                        <a class="btn btn-info" href="/Tablilla/Crear">Agregar Tablilla</a>
                    </div>
                }
                <RadzenGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="20"
                            AllowSorting="true" Data="@tablilla" TItem="Tablilla" ColumnWidth="200px">
                    <Columns>
                        <RadzenGridColumn TItem="Tablilla" Property="Id" Title="Id">
                            <Template Context="data">
                                @if (_esAdmin)
                                {
                                    <a href="/Tablilla/Editar/@data?.Id">@data?.Id</a>
                                }
                                else
                                {
                                    @data?.Id
                                }
                            </Template>
                        </RadzenGridColumn>
                        <RadzenGridColumn TItem="Tablilla" Property="Mac" Title="Direccion Mac" />
                        <RadzenGridColumn TItem="Tablilla" Property="Ip" Title="Direccion IP" />
                        <RadzenGridColumn TItem="Tablilla" Property="Descripcion" Title="Descripcion" />
                        <RadzenGridColumn TItem="Tablilla" Property="Activo" Title="Activo">
                            <Template Context="data">
                                @if (@data.Activo)
                                {
                                    <label>SI</label>

                                }
                                else
                                {
                                    <label>NO</label>
                                }
                            </Template>
                        </RadzenGridColumn>
                        @if (_esAdmin)
                        {
                            <RadzenGridColumn TItem="Tablilla" Property="" Title="Borrar">
                                <Template Context="data">
                                    <RadzenButton Click="@(() => BorrarID(data?.Id))" Icon="delete" Style="margin-bottom: 20px; width: 80px" />
                                </Template>
                            </RadzenGridColumn>
                        }
                    </Columns>
                </RadzenGrid>
            }
            else
            {
                <text>No tiene permisos suficientes para estar aquí...</text>
            }
        }
    </Authorized>
    <NotAuthorized>
        <text> No tiene permisos suficientes para estar aquí...</text>
    </NotAuthorized>
</AuthorizeView>
@code
{
    IEnumerable<Tablilla> tablilla;
    //IEnumerable<Empresa> empresa;
    int? id;
    public enum TipoMensaje { None, Exito, Error, Info };
    TipoMensaje tipoMensaje;
    BlazorCoockies blazorCoockies = new BlazorCoockies();
    bool _esAdmin;
    bool _ver;
    bool _crear;
    bool _editar;
    bool _borrar;
    int _idEmpresa;
    int _idSucursal;
    private List<Llave> LlaveNoSeleccionada = new List<Llave>();
    //private List<Vehiculo> VehiculoNoSeleccionada = new List<Vehiculo>();
    //private List<ConductorVehiculo> ConductorVehiculoNoSeleccionada = new List<ConductorVehiculo>();
    //private List<Conductor> ConductorNoSeleccionada = new List<Conductor>();
    //private List<ProveedorEmpresaSucursal> ProveedorEmpresaSucursalNoSeleccionada = new List<ProveedorEmpresaSucursal>();
    Tablilla Tablilla;

    public void Dispose()
    {
        dialogService.OnOpen -= Open;
        dialogService.OnClose -= Close;
        dialogServiceDesactivar.OnOpen -= Open;
        dialogServiceDesactivar.OnClose -= Close;
    }

    protected override async Task OnInitializedAsync()
    {
        dialogService.Dispose();
        dialogServiceDesactivar.Dispose();
        var token = await Auth.GetTokenAsync();
        if (!string.IsNullOrEmpty(token))
        {
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            await blazorCoockies.CoockieGetter(sessionStorage);
            await Cargar();
            _esAdmin = Boolean.Parse(blazorCoockies.EsAdmin.ToString());
            _ver = Boolean.Parse(blazorCoockies.Ver.ToString());
            _crear = Boolean.Parse(blazorCoockies.Crear.ToString());
            _editar = Boolean.Parse(blazorCoockies.Editar.ToString());
            _borrar = Boolean.Parse(blazorCoockies.Borrar.ToString());
            _idEmpresa = int.Parse(blazorCoockies.IDUserEmpresa);
            _idSucursal = int.Parse(blazorCoockies.IDUserSucursal);
            dialogService.OnOpen += Open;
            dialogService.OnClose += Close;
        }
    }

    private async Task Cargar()
    {
        try
        {
            var httpResponse = await repositorio.Get<List<Tablilla>>("api/Tablilla");
            tablilla = httpResponse.Response;
        }
        catch
        {
            tablilla = null;
        }
    }

    async Task Borrar(Tablilla tablilla)
    {
        bool esBorrable = await VerSiNoHayReferenciasDelRegistro(tablilla.Id);
        if (esBorrable)
        {
            var responseHttp = await repositorio.Delete($"api/Tablilla/{tablilla.Id}");
            if (responseHttp.Error)
            {
                ShowNotification(TipoMensaje.Error);
            }
            else
            {
                await Cargar();
                ShowNotification(TipoMensaje.Exito);
            }
        }
        else
        {
            dialogServiceDesactivar.OnOpen += OpenDesactivar;
            dialogServiceDesactivar.OnClose += CloseDesactivar;
            dialogService.OnOpen -= Open;
            dialogService.OnClose -= Close;
            dialogServiceDesactivar.Confirm("El registro con el id " + tablilla.Id.ToString() + " ya esta en otras tablas, no se puede borrar pero si desactivar, desea hacerlo?   ", "Aviso ", new ConfirmOptions() { OkButtonText = "VA", CancelButtonText = "NO VA" });
        }
    }

    void BorrarID(int? _id)
    {
        id = _id;
        dialogService.Confirm("Estas seguro de querer borrar el id " + _id.ToString() + " ? ", "Aviso ", new ConfirmOptions() { OkButtonText = "Si", CancelButtonText = "No" });
    }

    async Task<bool> VerSiNoHayReferenciasDelRegistro(int xidx)
    {
        var httpResponse4 = await repositorio.Get<List<Llave>>("api/Llave");
        LlaveNoSeleccionada = httpResponse4.Response;

        if (httpResponse4.Error /*|| httpResponse5.Error*/)
        {
            return false; //no borrable
        }
        else
        {
            int referenias = -1;
            var numReferenciasLlave = (from a in LlaveNoSeleccionada
                                       where a.IdTablilla == xidx
                                       select a).Distinct().Count();

            try
            {
                referenias = numReferenciasLlave;
            }
            catch (Exception ee) // JAMAS BORRAR
            { }// JAMAS BORRAR

            if (referenias <= 0)
            {
                return true; //borrable
            }
            else
            {
                return false; //no borrable
            }
        }
    }

    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        StateHasChanged();
    }

    void Close(dynamic result)
    {
        if (result && id.HasValue)
        {
            RunSync();
        }
        else
        {
            ShowNotification(TipoMensaje.Info);
        }
    }

    private void RunSync()
    {
        Task.Run(async () => await Borrar(tablilla.Where(x => x.Id == id).FirstOrDefault())).ContinueWith(t => this.StateHasChanged()); ;
    }

    async Task ShowSimpleDialog() => await dialogService.OpenAsync("Simple Dialog", ds =>
    @<RadzenCard Style="padding: 20px;">
        <p Style="margin-bottom: 10px;">Confirm?</p>
        <div class="row">
            <div class="col-md-12">
                <RadzenButton Text="Ok" Click="() =>  ds.Close(true)" Style="margin-bottom: 10px; width: 150px" />
                <RadzenButton Text="Cancel" Click="()=> ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" Style="margin-bottom: 10px; width: 150px" />
            </div>
        </div>
    </RadzenCard>
    );


    void ShowNotification(TipoMensaje tipoMensaje)
    {
        switch (tipoMensaje)
        {
            case TipoMensaje.Exito: // exito
                ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Success Summary", Detail = "Exito al Eliminar Registro", Duration = 2000 });
                break;
            case TipoMensaje.Error://error
                ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Error Summary", Detail = "Error al borrar registro", Duration = 2000 });
                break;
            case TipoMensaje.Info://info
                ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Info, Summary = "Info", Detail = "No se borro nada", Duration = 2000 });
                break;
        }
    }

    async Task ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);
    }

    void OpenDesactivar(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        StateHasChanged();
    }

    void CloseDesactivar(dynamic result)
    {
        if (result && id.HasValue)
        {
            RunSyncnDesactivar(id.Value);
        }
        else
        {
            ShowNotification(TipoMensaje.Info);
            StateHasChanged();
        }
        dialogServiceDesactivar.OnOpen -= OpenDesactivar;
        dialogServiceDesactivar.OnClose -= CloseDesactivar;
        dialogService.OnOpen += Open;
        dialogService.OnClose += Close;
    }

    private void RunSyncnDesactivar(int _id)
    {
        Task.Run(async () => await Editar(_id).ContinueWith(t => this.StateHasChanged()));
    }

    async Task ShowSimpleDialogDesactivar() => await dialogServiceDesactivar.OpenAsync("Simple Dialog", dsd =>
    @<RadzenCard Style="padding: 20px;">
        <p Style="margin-bottom: 10px;">Confirm?</p>
        <div class="row">
            <div class="col-md-12">
                <RadzenButton Text="Ok" Click="() =>  dsd.Close(true)" Style="margin-bottom: 10px; width: 150px" />
                <RadzenButton Text="Cancel" Click="()=> dsd.Close(false)" ButtonStyle="ButtonStyle.Secondary" Style="margin-bottom: 10px; width: 150px" />
            </div>
        </div>
    </RadzenCard>
    );

    private async Task Editar(int _id)
    {
        Tablilla = tablilla.Where(x => x.Id == _id).FirstOrDefault();
        Tablilla.Activo = false;
        var httpResponse = await repositorio.Put($"api/Tablilla/{_id}", Tablilla);
        if (httpResponse.Error)
        {
            ShowNotification(TipoMensaje.Error);
        }
        else
        {
            ShowNotification(TipoMensaje.Exito);
            navigationManager.NavigateTo("Tablilla");
        }
    }
}
