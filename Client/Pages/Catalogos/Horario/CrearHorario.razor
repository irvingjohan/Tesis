@page "/Horario/Crear"
@inject IRepositorio repositorio
@inject NavigationManager navigationManager
@inject DialogService dialogService
@inject NotificationService notificationService
@implements IDisposable
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@*Login*@
@attribute [Authorize]
@inject CustomAuthenticationStateProvider Auth
@inject HttpClient Http
@*Login*@

<AuthorizeView>
    <Authorized>
        <h3>Crear Permisos</h3>
        <br />
        @if (_esAdmin || _crearUsuarios || _borrarUsuarios || _editarUsuarios)
        {
            <FormularioHorario OnValidSubmit="Crear" Horario="horario0" IsCreatingPage="true" TextoPermiso="Lunes" HoraInicio="horario0.HoraInicio" HoraFin="horario0.HoraFin" _idAgrupador="0" />
            <FormularioHorario OnValidSubmit="Crear" Horario="horario1" IsCreatingPage="true" TextoPermiso="Martes"  HoraInicio="horario1.HoraInicio" HoraFin="horario1.HoraFin" _idAgrupador="horario0.Agrupador" />
            <FormularioHorario OnValidSubmit="Crear" Horario="horario2" IsCreatingPage="true" TextoPermiso="Miecoles"HoraInicio="horario2.HoraInicio" HoraFin="horario2.HoraFin" _idAgrupador="horario0.Agrupador" />
            <FormularioHorario OnValidSubmit="Crear" Horario="horario3" IsCreatingPage="true" TextoPermiso="Jueves"  HoraInicio="horario3.HoraInicio" HoraFin="horario3.HoraFin" _idAgrupador="horario0.Agrupador" />
            <FormularioHorario OnValidSubmit="Crear" Horario="horario4" IsCreatingPage="true" TextoPermiso="Viernes" HoraInicio="horario4.HoraInicio" HoraFin="horario4.HoraFin" _idAgrupador="horario0.Agrupador" />
            <FormularioHorario OnValidSubmit="Crear" Horario="horario5" IsCreatingPage="true" TextoPermiso="Sabado"  HoraInicio="horario5.HoraInicio" HoraFin="horario5.HoraFin" _idAgrupador="horario0.Agrupador" />
            <FormularioHorario OnValidSubmit="Crear" Horario="horario6" IsCreatingPage="true" TextoPermiso="Domingo" HoraInicio="horario6.HoraInicio" HoraFin="horario6.HoraFin" _idAgrupador="horario0.Agrupador" />
            @*<FormularioPermisos OnValidSubmit="Crear" Permisos="permisos0" IsCreatingPage="true" TextoPermiso="Ver" useRolCBO="true" _idRol="-1" />
            <FormularioPermisos OnValidSubmit="Crear" Permisos="permisos1" IsCreatingPage="true" TextoPermiso="Crear" useRolCBO="false" _idRol="permisos0.IdRol" />
            <FormularioPermisos OnValidSubmit="Crear" Permisos="permisos2" IsCreatingPage="true" TextoPermiso="Editar" useRolCBO="false" _idRol="permisos0.IdRol" />
            <FormularioPermisos OnValidSubmit="Crear" Permisos="permisos3" IsCreatingPage="true" TextoPermiso="Borrar" useRolCBO="false" _idRol="permisos0.IdRol" />
            <FormularioPermisos OnValidSubmit="Crear" Permisos="permisos4" IsCreatingPage="true" TextoPermiso="VerUsuarios" useRolCBO="false" _idRol="permisos0.IdRol" />
            <FormularioPermisos OnValidSubmit="Crear" Permisos="permisos5" IsCreatingPage="true" TextoPermiso="CrearUsuarios" useRolCBO="false" _idRol="permisos0.IdRol" />
            <FormularioPermisos OnValidSubmit="Crear" Permisos="permisos6" IsCreatingPage="true" TextoPermiso="EditarUsuarios" useRolCBO="false" _idRol="permisos0.IdRol" />*@
            <button class="btn btn-success" type="submit" @onclick="Crear">Guardar Cambios</button>
        }
        else
        {
            <text>No tiene permisos suficientes para estar aquí...</text>
        }
    </Authorized>
    <NotAuthorized>
        <text> No tiene permisos suficientes para estar aquí...</text>
    </NotAuthorized>
</AuthorizeView>
@code
{
    Horario[] listHorario = new Horario[7];
    Horario horario0 = new Horario();
    Horario horario1 = new Horario();
    Horario horario2 = new Horario();
    Horario horario3 = new Horario();
    Horario horario4 = new Horario();
    Horario horario5 = new Horario();
    Horario horario6 = new Horario();
    bool finished;
    BlazorCoockies blazorCoockies = new BlazorCoockies();
    public enum TipoMensaje { None, Exito, Error, Info, NoMames };
    TipoMensaje tipoMensaje;
    bool _esAdmin;
    bool _crearUsuarios;
    bool _editarUsuarios;
    bool _borrarUsuarios;
    int _idEmpresa;
    int _idSucursal;
    bool locked;

    public void Dispose()
    {
        dialogService.OnOpen -= Open;
        dialogService.OnClose -= Close;
    }

    protected override async Task OnInitializedAsync()
    {
        dialogService.Dispose();
        var token = await Auth.GetTokenAsync();
        if (!string.IsNullOrEmpty(token))
        {
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            await blazorCoockies.CoockieGetter(sessionStorage);
            _esAdmin = Boolean.Parse(blazorCoockies.EsAdmin.ToString());
            _crearUsuarios = Boolean.Parse(blazorCoockies.CrearUsuarios.ToString());
            _editarUsuarios = Boolean.Parse(blazorCoockies.EditarUsuarios.ToString());
            _borrarUsuarios = Boolean.Parse(blazorCoockies.BorrarUsuarios.ToString());
            _idEmpresa = int.Parse(blazorCoockies.IDUserEmpresa);
            _idSucursal = int.Parse(blazorCoockies.IDUserSucursal);
            dialogService.OnOpen += Open;
            dialogService.OnClose += Close;
        }
    }

    private async Task Crear()
    {
        if (!locked)
        {
            locked = true;
            for (int i = 0; i <= 6; i++)
            {
                switch (i)
                {
                    case 0:
                        if (horario0.HoraInicio == DateTime.MinValue && horario0.HoraFin == DateTime.MinValue)
                            horario0.Activo = false;
                        else
                            horario0.Activo = true;
                        horario0.Descripcion = horario0.Dia + "  " + horario0.HoraInicio.ToString("hh:mm tt") + "  -  " + horario0.HoraFin.ToString("hh:mm tt");
                        listHorario[i] = horario0;
                        break;
                    case 1:
                        if (horario1.HoraInicio == DateTime.MinValue && horario1.HoraFin == DateTime.MinValue)
                            horario1.Activo = false;
                        else
                            horario1.Activo = true;
                        horario1.Descripcion = horario1.Dia + "  " + horario1.HoraInicio.ToString("hh:mm tt") + "  -  " + horario1.HoraFin.ToString("hh:mm tt");
                        listHorario[i] = horario1;
                        break;
                    case 2:
                        if (horario2.HoraInicio == DateTime.MinValue && horario2.HoraFin == DateTime.MinValue)
                            horario2.Activo = false;
                        else
                            horario2.Activo = true;
                        horario2.Descripcion = horario2.Dia + "  " + horario2.HoraInicio.ToString("hh:mm tt") + "  -  " + horario2.HoraFin.ToString("hh:mm tt");
                        listHorario[i] = horario2;
                        break;
                    case 3:
                        if (horario3.HoraInicio == DateTime.MinValue && horario3.HoraFin == DateTime.MinValue)
                            horario3.Activo = false;
                        else
                            horario3.Activo = true;
                        horario3.Descripcion = horario3.Dia + "  " + horario3.HoraInicio.ToString("hh:mm tt") + "  -  " + horario3.HoraFin.ToString("hh:mm tt");
                        listHorario[i] = horario3;
                        break;
                    case 4:
                        if (horario4.HoraInicio == DateTime.MinValue && horario4.HoraFin == DateTime.MinValue)
                            horario4.Activo = false;
                        else
                            horario4.Activo = true;
                        horario4.Descripcion = horario4.Dia + "  " + horario4.HoraInicio.ToString("hh:mm tt") + "  -  " + horario4.HoraFin.ToString("hh:mm tt");
                        listHorario[i] = horario4;
                        break;
                    case 5:
                        if (horario5.HoraInicio == DateTime.MinValue && horario5.HoraFin == DateTime.MinValue)
                            horario5.Activo = false;
                        else
                            horario5.Activo = true;
                        horario5.Descripcion = horario5.Dia + "  " + horario5.HoraInicio.ToString("hh:mm tt") + "  -  " + horario5.HoraFin.ToString("hh:mm tt");
                        listHorario[i] = horario5;
                        break;
                    case 6:
                        if (horario6.HoraInicio == DateTime.MinValue && horario6.HoraFin == DateTime.MinValue)
                            horario6.Activo = false;
                        else
                            horario6.Activo = true;
                        horario6.Descripcion = horario6.Dia + "  " + horario6.HoraInicio.ToString("hh:mm tt") + "  -  " + horario6.HoraFin.ToString("hh:mm tt");
                        listHorario[i] = horario6;
                        break;
                }

                //if (listHorario[0].IdRol > 0) ////agregado
                //{

                //for ( i = 0; i <= 6; i++)
                //{
                //    if (listHorario[i].HoraFin  ) 
                //    {

                //    }
                //}

                var httpResponse = await repositorio.Post("api/Horario", listHorario[i]);
                if (httpResponse.Error)
                {
                    var body = await httpResponse.GetBody();
                    ShowNotification(TipoMensaje.Error);
                    locked = false;
                }
                else
                {
                    if (finished)
                    {
                        ShowNotification(TipoMensaje.Exito);
                        finished = false;
                        navigationManager.NavigateTo("/Horario");
                        locked = false;
                    }
                }
                //}
                //else ////agregado
                //{
                //    ShowNotification(TipoMensaje.NoMames);
                //}
            }
        }
    }

    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        StateHasChanged();
    }

    void Close(dynamic result)
    {
        if (result)
        { }
        else
        {
            ShowNotification(TipoMensaje.Info);
        }
    }

    async Task ShowSimpleDialog() => await dialogService.OpenAsync("Simple Dialog", ds =>
    @<RadzenCard Style="padding: 20px;">
        <p Style="margin-bottom: 10px;">Confirm?</p>
        <div class="row">
            <div class="col-md-12">
                <RadzenButton Text="Ok" Click="() =>  ds.Close(true)" Style="margin-bottom: 10px; width: 150px" />
                <RadzenButton Text="Cancel" Click="()=> ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" Style="margin-bottom: 10px; width: 150px" />
            </div>
        </div>
    </RadzenCard>
    );

    void ShowNotification(TipoMensaje tipoMensaje)
    {
        switch (tipoMensaje)
        {
            case TipoMensaje.Exito: // exito
                ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Success Summary", Detail = "Exito al Crear Registro", Duration = 2000 });
                break;
            case TipoMensaje.Error://error
                ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Error Summary", Detail = "Error al  Crear Registro", Duration = 2000 });
                break;
            case TipoMensaje.Info://info
                ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Info, Summary = "Info", Detail = "No se Creo nada", Duration = 2000 });
                break;
            case TipoMensaje.NoMames: ////agregado
                ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Info, Summary = "Info", Detail = "Debes seleccionar un rol de primero", Duration = 2000 });
                break;
        }
    }

    async Task ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);
    }
}