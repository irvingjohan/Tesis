@page "/Llave"
@inject IRepositorio repositorio
@inject NavigationManager navigationManager
@inject DialogService dialogService
@inject DialogService dialogServiceDesactivar
@implements IDisposable
@inject NotificationService notificationService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@*Login*@
@attribute [Authorize]
@inject CustomAuthenticationStateProvider Auth
@inject HttpClient Http
@*Login*@

<AuthorizeView>
    <Authorized>
        <h3>Catálogo de Llave</h3>

        @if (llave == null)
        {
            if (!_esAdmin)
            {
                <text>No tiene permisos suficientes para estar aquí...</text>
            }
        }
        else
        {
            if (_esAdmin)
            {
                if (_esAdmin)
                {
                    <div class="form-group">
                        <a class="btn btn-info" href="/Llave/Crear">Agregar Llave</a>
                    </div>
                }
                <RadzenGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="20"
                            AllowSorting="true" Data="@llave" TItem="Llave" ColumnWidth="200px">
                    <Columns>
                        <RadzenGridColumn TItem="Llave" Property="Id" Title="Id">
                            <Template Context="data">
                                @if (_esAdmin)
                                {
                                    <a href="/Llave/Editar/@data?.Id">@data?.Id</a>
                                }
                                else
                                {
                                    @data?.Id
                                }
                            </Template>
                        </RadzenGridColumn>
                        <RadzenGridColumn TItem="Llave" Property="IdTablilla" Title="Id Tablilla">
                            <Template Context="data">
                                @tablilla.Where(x => x.Id == @data?.IdTablilla).Select(x => x.Descripcion).FirstOrDefault()
                            </Template>
                        </RadzenGridColumn>
                        <RadzenGridColumn TItem="Llave" Property="Descripcion" Title="Descripcion" />

                        <RadzenGridColumn TItem="Llave" Property="Estatus" Title="Estatus" />
                        @if (_esAdmin)
                        {
                            <RadzenGridColumn TItem="Llave" Property="" Title="Borrar">
                                <Template Context="data">
                                    <RadzenButton Click="@(() => BorrarID(data?.Id))" Icon="delete" Style="margin-bottom: 20px; width: 80px" />
                                </Template>
                            </RadzenGridColumn>
                        }
                    </Columns>
                </RadzenGrid>
            }
            else
            {
                <text>No tiene permisos suficientes para estar aquí...</text>
            }
        }
    </Authorized>
    <NotAuthorized>
        <text> No tiene permisos suficientes para estar aquí...</text>
    </NotAuthorized>
</AuthorizeView>
@code
{
    IEnumerable<Llave> llave;
    IEnumerable<Tablilla> tablilla;
    int? id;
    public enum TipoMensaje { None, Exito, Error, Info };
    TipoMensaje tipoMensaje;
    BlazorCoockies blazorCoockies = new BlazorCoockies();
    bool _esAdmin;
    bool _ver;
    bool _crear;
    bool _editar;
    bool _borrar;
    int _idEmpresa;
    int _idSucursal;
    //private List<Usuario> UsuarioNoSeleccionada = new List<Usuario>();
    //private List<Vehiculo> VehiculoNoSeleccionada = new List<Vehiculo>();
    //private List<ConductorVehiculo> ConductorVehiculoNoSeleccionada = new List<ConductorVehiculo>();
    //private List<Conductor> ConductorNoSeleccionada = new List<Conductor>();
    //private List<ProveedorEmpresaSucursal> ProveedorEmpresaSucursalNoSeleccionada = new List<ProveedorEmpresaSucursal>();
    Llave Llave;

    public void Dispose()
    {
        dialogService.OnOpen -= Open;
        dialogService.OnClose -= Close;
        dialogServiceDesactivar.OnOpen -= Open;
        dialogServiceDesactivar.OnClose -= Close;
    }

    protected override async Task OnInitializedAsync()
    {
        dialogService.Dispose();
        dialogServiceDesactivar.Dispose();
        var token = await Auth.GetTokenAsync();
        if (!string.IsNullOrEmpty(token))
        {
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            await blazorCoockies.CoockieGetter(sessionStorage);
            await Cargar();
            _esAdmin = Boolean.Parse(blazorCoockies.EsAdmin.ToString());
            _ver = Boolean.Parse(blazorCoockies.Ver.ToString());
            _crear = Boolean.Parse(blazorCoockies.Crear.ToString());
            _editar = Boolean.Parse(blazorCoockies.Editar.ToString());
            _borrar = Boolean.Parse(blazorCoockies.Borrar.ToString());
            _idEmpresa = int.Parse(blazorCoockies.IDUserEmpresa);
            _idSucursal = int.Parse(blazorCoockies.IDUserSucursal);
            dialogService.OnOpen += Open;
            dialogService.OnClose += Close;
        }
    }

    private async Task Cargar()
    {
        try
        {
            var httpResponse = await repositorio.Get<List<Llave>>("api/Llave");
            llave = httpResponse.Response;
            var httpResponse2 = await repositorio.Get<List<Tablilla>>("api/Tablilla");
            tablilla = httpResponse2.Response;
        }
        catch
        {
            llave = null;
            tablilla = null;
        }
    }

    async Task Borrar(Llave llave)
    {

        var responseHttp = await repositorio.Delete($"api/Llave/{llave.Id}");
        if (responseHttp.Error)
        {
            ShowNotification(TipoMensaje.Error);
        }
        else
        {
            await Cargar();
            ShowNotification(TipoMensaje.Exito);
        }
    }

    void BorrarID(int? _id)
    {
        id = _id;
        dialogService.Confirm("Estas seguro de querer borrar el id " + _id.ToString() + " ? ", "Aviso ", new ConfirmOptions() { OkButtonText = "Si", CancelButtonText = "No" });
    }

    //async Task<bool> VerSiNoHayReferenciasDelRegistro(int xidx)
    //{
    //    var httpResponse4 = await repositorio.Get<List<Tablilla>>("api/Tablilla");
    //    //VehiculoNoSeleccionada = httpResponse4.Response;
    //    //var httpResponse5 = await repositorio.Get<List<Usuario>>("api/Usuario");
    //    //UsuarioNoSeleccionada = httpResponse5.Response;
    //    //var httpResponse6 = await repositorio.Get<List<ConductorVehiculo>>("api/ConductorVehiculo"); //pito de payaso
    //    //ConductorVehiculoNoSeleccionada = httpResponse6.Response;
    //    //var httpResponse7 = await repositorio.Get<List<Conductor>>("api/Conductor");
    //    //ConductorNoSeleccionada = httpResponse7.Response;
    //    //var httpResponse8 = await repositorio.Get<List<ProveedorEmpresaSucursal>>("api/ProveedorEmpresaSucursal");
    //    //ProveedorEmpresaSucursalNoSeleccionada = httpResponse8.Response;

    //    if (httpResponse4.Error /*|| httpResponse5.Error*/)
    //    {
    //        return false; //no borrable
    //    }
    //    else
    //    {
    //        int referenias = -1;
    //        var numReferenciasVehiculos = (from a in VehiculoNoSeleccionada
    //                                       where a.IdSucursal == xidx
    //                                       select a).Distinct().Count();

    //        var numReferenciasUsuarios = (from a in UsuarioNoSeleccionada
    //                                      where a.IdSucursal == xidx
    //                                      select a).Distinct().Count();

    //        var numReferenciasConductor = (from a in ConductorVehiculoNoSeleccionada
    //                                       where a.IdSucursal == xidx
    //                                       select a).Distinct().Count();

    //        var numReferenciasConductorVehiculo = (from a in ConductorVehiculoNoSeleccionada
    //                                               where a.IdSucursal == xidx
    //                                               select a).Distinct().Count();

    //        var numReferenciasPES = (from a in ProveedorEmpresaSucursalNoSeleccionada
    //                                 where a.IdProveedor == xidx
    //                                 select a).Distinct().Count();

    //        try
    //        {
    //            referenias = numReferenciasVehiculos + numReferenciasUsuarios + numReferenciasConductor + numReferenciasConductorVehiculo + numReferenciasPES;
    //        }
    //        catch (Exception ee) // JAMAS BORRAR
    //        { }// JAMAS BORRAR

    //        if (referenias <= 0)
    //        {
    //            return true; //borrable
    //        }
    //        else
    //        {
    //            return false; //no borrable
    //        }
    //    }
    //}

    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        StateHasChanged();
    }

    void Close(dynamic result)
    {
        if (result && id.HasValue)
        {
            RunSync();
        }
        else
        {
            ShowNotification(TipoMensaje.Info);
        }
    }

    private void RunSync()
    {
        Task.Run(async () => await Borrar(llave.Where(x => x.IdTablilla == id).FirstOrDefault())).ContinueWith(t => this.StateHasChanged()); ;
    }

    async Task ShowSimpleDialog() => await dialogService.OpenAsync("Simple Dialog", ds =>
    @<RadzenCard Style="padding: 20px;">
        <p Style="margin-bottom: 10px;">Confirm?</p>
        <div class="row">
            <div class="col-md-12">
                <RadzenButton Text="Ok" Click="() =>  ds.Close(true)" Style="margin-bottom: 10px; width: 150px" />
                <RadzenButton Text="Cancel" Click="()=> ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" Style="margin-bottom: 10px; width: 150px" />
            </div>
        </div>
    </RadzenCard>
    );


    void ShowNotification(TipoMensaje tipoMensaje)
    {
        switch (tipoMensaje)
        {
            case TipoMensaje.Exito: // exito
                ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Success Summary", Detail = "Exito al Eliminar Registro", Duration = 2000 });
                break;
            case TipoMensaje.Error://error
                ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Error Summary", Detail = "Error al borrar registro", Duration = 2000 });
                break;
            case TipoMensaje.Info://info
                ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Info, Summary = "Info", Detail = "No se borro nada", Duration = 2000 });
                break;
        }
    }

    async Task ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);
    }

    void OpenDesactivar(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        StateHasChanged();
    }

    void CloseDesactivar(dynamic result)
    {
        if (result && id.HasValue)
        {
            RunSyncnDesactivar(id.Value);
        }
        else
        {
            ShowNotification(TipoMensaje.Info);
            StateHasChanged();
        }
        dialogServiceDesactivar.OnOpen -= OpenDesactivar;
        dialogServiceDesactivar.OnClose -= CloseDesactivar;
        dialogService.OnOpen += Open;
        dialogService.OnClose += Close;
    }

    private void RunSyncnDesactivar(int _id)
    {
        Task.Run(async () => await Editar(_id).ContinueWith(t => this.StateHasChanged()));
    }

    async Task ShowSimpleDialogDesactivar() => await dialogServiceDesactivar.OpenAsync("Simple Dialog", dsd =>
    @<RadzenCard Style="padding: 20px;">
        <p Style="margin-bottom: 10px;">Confirm?</p>
        <div class="row">
            <div class="col-md-12">
                <RadzenButton Text="Ok" Click="() =>  dsd.Close(true)" Style="margin-bottom: 10px; width: 150px" />
                <RadzenButton Text="Cancel" Click="()=> dsd.Close(false)" ButtonStyle="ButtonStyle.Secondary" Style="margin-bottom: 10px; width: 150px" />
            </div>
        </div>
    </RadzenCard>
    );

    private async Task Editar(int _id)
    {
        Llave = llave.Where(x => x.IdTablilla == _id).FirstOrDefault();
       /// Sucursal.Activo = false;
        var httpResponse = await repositorio.Put($"api/Llave/{_id}", Llave);
        if (httpResponse.Error)
        {
            ShowNotification(TipoMensaje.Error);
        }
        else
        {
            ShowNotification(TipoMensaje.Exito);
            navigationManager.NavigateTo("Llave");
        }
    }
}